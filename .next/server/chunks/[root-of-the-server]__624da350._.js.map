{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dell/Desktop/NuevoProyecto/src/lib/database.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nconst poolConfig = {\r\n  host: '127.0.0.1',\r\n  port: 3306,\r\n  user: 'root',\r\n  password: 'admin',\r\n  database: 'inami',\r\n  connectionLimit: 10,\r\n  waitForConnections: true,\r\n  queueLimit: 0,\r\n  // Propiedades v√°lidas para timeout:\r\n  connectTimeout: 60000, // tiempo para establecer conexi√≥n\r\n  timeout: 60000, // tiempo de inactividad antes de timeout\r\n};\r\n\r\nconst pool = mysql.createPool(poolConfig);\r\n\r\nexport async function connectDB() {\r\n  return await pool.getConnection();\r\n}\r\n\r\nexport async function testConnection() {\r\n  let conn;\r\n  try {\r\n    conn = await pool.getConnection();\r\n    const [rows] = await conn.execute('SELECT 1 as test');\r\n    console.log('‚úÖ Conexi√≥n a la BD exitosa');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('‚ùå Error conectando a la BD:', error);\r\n    return false;\r\n  } finally {\r\n    if (conn) conn.release();\r\n  }\r\n}\r\n\r\nexport { pool };"],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,aAAa;IACjB,MAAM;IACN,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,iBAAiB;IACjB,oBAAoB;IACpB,YAAY;IACZ,oCAAoC;IACpC,gBAAgB;IAChB,SAAS;AACX;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;AAEvB,eAAe;IACpB,OAAO,MAAM,KAAK,aAAa;AACjC;AAEO,eAAe;IACpB,IAAI;IACJ,IAAI;QACF,OAAO,MAAM,KAAK,aAAa;QAC/B,MAAM,CAAC,KAAK,GAAG,MAAM,KAAK,OAAO,CAAC;QAClC,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;IACT,SAAU;QACR,IAAI,MAAM,KAAK,OAAO;IACxB;AACF","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dell/Desktop/NuevoProyecto/src/app/api/seguridad/fichas/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { connectDB } from '@/lib/database';\r\n\r\n\r\n\r\n// GET - Obtener una ficha espec√≠fica por ID\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  let conn;\r\n  try {\r\n    const id = params.id;\r\n    console.log(`üì• GET /api/seguridad/fichas/${id} recibida`);\r\n    \r\n    // Validar que el ID sea un n√∫mero\r\n    if (isNaN(Number(id))) {\r\n      return NextResponse.json(\r\n        { error: 'ID inv√°lido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    conn = await connectDB();\r\n    const query = 'SELECT * FROM fichas_seguridad WHERE id = ?';\r\n    \r\n    const [fichas] = await conn.execute(query, [id]) as any[];\r\n    \r\n    if (fichas.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Ficha no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    console.log(`‚úÖ Ficha ${id} encontrada`);\r\n    return NextResponse.json(fichas[0]);\r\n    \r\n  } catch (error) {\r\n    console.error(`‚ùå Error obteniendo ficha ${params.id}:`, error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) conn.release();\r\n  }\r\n}\r\n\r\n// PUT - Actualizar una ficha espec√≠fica\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  let conn;\r\n  try {\r\n    const id = params.id;\r\n    console.log(`üì• PUT /api/seguridad/fichas/${id} recibida`);\r\n    \r\n    // Validar ID\r\n    if (isNaN(Number(id))) {\r\n      return NextResponse.json(\r\n        { error: 'ID inv√°lido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const updates = await request.json();\r\n    console.log('üìù Datos recibidos para actualizar:', updates);\r\n    \r\n    conn = await connectDB();\r\n    \r\n    // Verificar que la ficha existe\r\n    const [fichaExistente] = await conn.execute(\r\n      'SELECT id FROM fichas_seguridad WHERE id = ?', \r\n      [id]\r\n    ) as any[];\r\n    \r\n    if (fichaExistente.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Ficha no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Validar datos m√≠nimos para actualizaci√≥n\r\n    if (Object.keys(updates).length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No hay datos para actualizar' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Construir la consulta de actualizaci√≥n\r\n    const camposPermitidos = [\r\n      'expediente', 'nombre', 'apellidos', 'fecha_nacimiento', 'genero',\r\n      'direccion', 'telefono', 'email', 'departamento', 'puesto',\r\n      'fecha_ingreso', 'estado', 'observaciones'\r\n    ];\r\n    \r\n    const camposActualizacion = Object.keys(updates).filter(key => \r\n      camposPermitidos.includes(key)\r\n    );\r\n    \r\n    if (camposActualizacion.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No hay campos v√°lidos para actualizar' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const setClause = camposActualizacion.map(key => `${key} = ?`).join(', ');\r\n    const values = camposActualizacion.map(key => {\r\n      const value = updates[key];\r\n      return value === '' ? null : value; // Convertir strings vac√≠os a null\r\n    });\r\n    values.push(id);\r\n    \r\n    const query = `UPDATE fichas_seguridad SET ${setClause} WHERE id = ?`;\r\n    console.log('üîç Query:', query);\r\n    console.log('üìä Values:', values);\r\n    \r\n    await conn.execute(query, values);\r\n    \r\n    console.log(`‚úÖ Ficha ${id} actualizada exitosamente`);\r\n    \r\n    // Obtener la ficha actualizada para devolverla\r\n    const [fichaActualizada] = await conn.execute(\r\n      'SELECT * FROM fichas_seguridad WHERE id = ?', \r\n      [id]\r\n    ) as any[];\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Ficha actualizada correctamente',\r\n      ficha: fichaActualizada[0]\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error(`‚ùå Error actualizando ficha ${params.id}:`, error);\r\n    console.error('üîç Stack trace:', error.stack);\r\n    \r\n    // Manejar errores espec√≠ficos\r\n    if (error.message.includes('Duplicate entry')) {\r\n      return NextResponse.json(\r\n        { error: 'Ya existe una ficha con ese expediente' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor al actualizar ficha: ' + error.message },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) conn.release();\r\n  }\r\n}\r\n\r\n// DELETE - Eliminar una ficha espec√≠fica\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  let conn;\r\n  try {\r\n    const id = params.id;\r\n    console.log(`üì• DELETE /api/seguridad/fichas/${id} recibida`);\r\n    \r\n    // Validar ID\r\n    if (isNaN(Number(id))) {\r\n      return NextResponse.json(\r\n        { error: 'ID inv√°lido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    conn = await connectDB();\r\n    \r\n    // Verificar que la ficha existe\r\n    const [fichaExistente] = await conn.execute(\r\n      'SELECT id FROM fichas_seguridad WHERE id = ?', \r\n      [id]\r\n    ) as any[];\r\n    \r\n    if (fichaExistente.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Ficha no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Eliminar ficha\r\n    await conn.execute('DELETE FROM fichas_seguridad WHERE id = ?', [id]);\r\n    \r\n    console.log(`‚úÖ Ficha ${id} eliminada exitosamente`);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Ficha eliminada correctamente'\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error(`‚ùå Error eliminando ficha ${params.id}:`, error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor al eliminar ficha' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    if (conn) conn.release();\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}